import { DeepPartial, Repository } from 'typeorm';
import { RestfulService } from '../classes';
import { FilterParamParsed, RequestParamsParsed, RestfulOptions, GetManyDefaultResponse, UpdateOneRouteOptions, DeleteOneRouteOptions } from '../interfaces';
export declare class RepositoryService<T> extends RestfulService<T> {
    protected repo: Repository<T>;
    protected options: RestfulOptions;
    private entityColumns;
    private entityColumnsHash;
    private entityRelationsHash;
    constructor(repo: Repository<T>);
    readonly findOne: Repository<T>['findOne'];
    readonly find: Repository<T>['find'];
    private readonly entityType;
    private readonly alias;
    decidePagination(query: RequestParamsParsed, mergedOptions: RestfulOptions): boolean;
    getMany(query?: RequestParamsParsed, options?: RestfulOptions): Promise<GetManyDefaultResponse<T> | T[]>;
    getOne({ fields, join, cache }?: RequestParamsParsed, options?: RestfulOptions): Promise<T>;
    createOne(data: DeepPartial<T>, params: FilterParamParsed[]): Promise<T>;
    createMany(data: {
        bulk: DeepPartial<T>[];
    }, params?: FilterParamParsed[]): Promise<T[]>;
    updateOne(data: DeepPartial<T>, params?: FilterParamParsed[], routeOptions?: UpdateOneRouteOptions): Promise<T>;
    deleteOne(params: FilterParamParsed[], routeOptions?: DeleteOneRouteOptions): Promise<void | T>;
    private getOneOrFail;
    private buildQuery;
    private plainToClass;
    private onInitMapEntityColumns;
    private onInitMapRelations;
    private getJoinType;
    private hasColumn;
    private hasRelation;
    private validateHasColumn;
    private getAllowedColumns;
    private getRelationMetadata;
    private setJoin;
    private setAndWhere;
    private setOrWhere;
    private getCacheId;
    private getSelect;
    private getSkip;
    private getTake;
    private getSort;
    private mapSort;
    private mapOperatorsToQuery;
}
